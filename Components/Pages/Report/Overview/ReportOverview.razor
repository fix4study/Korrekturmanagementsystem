@page "/Meldungen"
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Models.Enums
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.WebUtilities
@inject IReportService ReportService

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3 class="mb-0">Meldungen</h3>
    <NavLink class="btn btn-success" href="/meldungen/neu">
        <i class="bi bi-plus-lg"></i> Neue Meldung
    </NavLink>
</div>

<div class="report-list space-y-2">
    @if (AllReports != null && AllReports.Any())
    {
        <ReportFilter Filter="Filter" Statuses="DistinctStatuses" Priorities="DistinctPriorities" />

        <Sorting CurrentSortField="Sorting.CurrentSortField"
                 SortDescending="Sorting.SortDescending"
                 OnSortChanged="Sorting.SetSort" />

        @foreach (var report in CurrentPageReports)
        {
            <ReportCard Report="report" />
        }

        <Pagination TotalPages="@Paging.TotalPages" CurrentPage="@Paging.CurrentPage" OnPageChange="Paging.SetPage" />
    }
    else
    {
        <p>Derzeit gibt es keine Meldungen</p>
    }
</div>

@code {
    private List<ReportOverviewDto> AllReports { get; set; } = new();
    private ReportFilterModel Filter { get; set; } = new();
    private ReportSortingModel Sorting { get; set; } = new();
    private List<ReportOverviewDto> FilteredReports => Filter.Apply(AllReports);
    private PagingModel Paging { get; set; } = new();
    private string _message = "";

    protected override async Task OnInitializedAsync()
    {
        AllReports = (await ReportService.GetAllReportsAsync()).ToList();

        SetupFilterEvents();

        Paging.OnPagingChanged += StateHasChanged;
        Paging.TotalItems = FilteredReports.Count();
    }

    private IEnumerable<string> DistinctStatuses => AllReports
        .Select(r => r.StatusName)
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<string> DistinctPriorities => AllReports
        .Select(r => r.PriorityName)
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<ReportOverviewDto> CurrentPageReports =>
        Paging.Paginate(Sorting.SortedReports(FilteredReports));

    private void SetupFilterEvents() =>
        Filter.OnChanged = () =>
        {
            Paging.CurrentPage = 1;
            Paging.TotalItems = FilteredReports.Count();
        };
}
